// Generated by CoffeeScript 1.4.0
(function() {
  var chokidar, cwd, express, helper, path;

  path = require('path');

  chokidar = require('chokidar');

  express = require('express');

  helper = require("./helper");

  cwd = process.cwd();

  module.exports = function(app, server, options) {
    var filetype, io, noop, sockets, watcher, _ref, _ref1, _ref2, _ref3;
    app.use('/puer', express["static"](path.join(__dirname, "../vendor")));
    if ((_ref = options.filetype) == null) {
      options.filetype = 'js|css|html|xhtml';
    }
    if ((_ref1 = options.reload) == null) {
      options.reload = true;
    }
    if ((_ref2 = options.inject) == null) {
      options.inject = [];
    }
    if ((_ref3 = options.ignored) == null) {
      options.ignored = /node_modules/;
    }
    noop = function() {};
    filetype = options.filetype.split('|');
    if (!options.dir) {
      throw Error("dir option is need to watch");
    }
    if (options.reload) {
      options.inject.push('<script src="/puer/js/reload.js"></script>');
      watcher = chokidar.watch(options.dir, {
        ignored: function(filename) {
          var ext, matched;
          if (options.ignored.test(filename)) {
            return true;
          } else {
            matched = /\.(\w+)$/.exec(filename);
            if (matched) {
              ext = matched[1];
              return filetype.indexOf(ext) === -1;
            } else {
              return false;
            }
          }
        },
        persistent: true
      });
      helper.log("watcher on!!");
      io = (require('socket.io')).listen(server);
      sockets = [];
      watcher.on('change', function(path, stats) {
        var data, socket, _i, _len, _results;
        data = {
          "path": path
        };
        if (~path.indexOf(".css")) {
          data.css = path.slice(cwd.length);
        }
        _results = [];
        for (_i = 0, _len = sockets.length; _i < _len; _i++) {
          socket = sockets[_i];
          if (socket) {
            _results.push(socket.emit("update", data));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      io.sockets.on("connection", function(socket) {
        sockets.push(socket);
        return socket.on('disconnect', function() {
          var index;
          index = sockets.indexOf(socket);
          if (index !== -1) {
            return sockets.splice(index, 1);
          }
        });
      });
    }
    return function(req, res, next) {
      var end, write;
      write = res.write;
      end = res.end;
      res.flush = noop;
      res.chunks = '';
      res.write = function(chunk, encoding) {
        var header, length;
        header = res.getHeader("content-type");
        length = res.getHeader("content-length");
        if ((/^text\/html/.test(header)) || !header) {
          if (Buffer.isBuffer(chunk)) {
            chunk = chunk.toString("utf8");
          }
          if (!~chunk.indexOf("</head>")) {
            return write.call(res, chunk, "utf8");
          }
          chunk = chunk.replace("</head>", options.inject.join('') + "</head>");
          if (length) {
            length = parseInt(length);
            length += Buffer.byteLength(options.inject.join(''));
            try {
              res._header = null;
              res.setHeader("content-Length", length);
              this._implicitHeader();
            } catch (e) {

            }
          }
          return write.call(res, chunk, "utf8");
        } else {
          return write.call(res, chunk, encoding);
        }
      };
      res.end = function(chunk, encoding) {
        if (chunk != null) {
          this.write(chunk, encoding);
        }
        return end.call(res);
      };
      return next();
    };
  };

}).call(this);
